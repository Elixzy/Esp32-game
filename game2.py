from machine import Pin, SoftI2C, PWM
from ssd1306 import SSD1306_I2C
from random import randint
from music import play
import _thread as th
import framebuf
import time

i2c = SoftI2C( Pin(4), Pin(16),freq=400000)
oled = SSD1306_I2C(128,64, i2c)

btn0 = Pin(33, Pin.IN, Pin.PULL_DOWN)
btn1 = Pin(22, Pin.IN, Pin.PULL_DOWN)
btn2 = Pin(21, Pin.IN, Pin.PULL_DOWN)
buzzer = Pin(27, Pin.OUT)
pwm = PWM(buzzer, freq=4000, duty=0)

x = randint(1, 54)
a_x = 26
score=0
block= True
state= False
run= True
shots=[]
enemies=[]
gameover=('C_5_ne','PAUSE_co','G_4_ne','PAUSE_co','E_4_ne','A_4_tn',
'B_4_tn','A_4_tn','G#_4_tn','A#_4_tn','A_4_tn','G_4_co','F_4_co','G_4_re')
a=(0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x48, 0x00, 0x00, 0x48, 0x00, 0x06, 0x28, 0x00, 0x06, 
	0x28, 0x00, 0x01, 0xc8, 0xc0, 0x00, 0x89, 0x40, 0x1f, 0xff, 0xc0, 0x20, 0x00, 0x20, 0x20, 0x00, 
	0x20, 0x1f, 0xff, 0xc0, 0x00, 0x89, 0x40, 0x01, 0xc8, 0xc0, 0x06, 0x28, 0x00, 0x06, 0x28, 0x00, 
	0x00, 0x48, 0x00, 0x00, 0x48, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00)
xd=(0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
	0x01, 0xff, 0xff, 0xff, 0xe7, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 
	0x01, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xfc, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc2, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe7, 0xff, 0xff, 0x18, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe3, 0xff, 0xfc, 0xf8, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xef, 0xff, 0xf3, 0xfd, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xfd, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xfc, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xfc, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x03, 0xff, 0xf9, 0xff, 0xfc, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xfe, 0xff, 0x9f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3c, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x19, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x7b, 0xfe, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x04, 0x33, 0xf3, 0x9c, 0xff, 0xff, 0xff, 0xf1, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x04, 0x53, 0xf3, 0xdc, 0xff, 0xff, 0xff, 0xf1, 0xff, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x3b, 0xf7, 0xec, 0xff, 0xff, 0xff, 0xf3, 0xff, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1b, 0xff, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x09, 0xff, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xbf, 0xcd, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xcf, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x03, 0xc4, 0x39, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x03, 0xcf, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0x99, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x00, 0x01, 0xe0, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xff, 0x99, 0xff, 0x1f, 0xff, 0xff, 0xfe, 
	0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0b, 0xff, 0x0f, 0xff, 0xff, 0xfe, 
	0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x8f, 0xff, 0xff, 0xfe, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xfe, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xcc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x82, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x7f, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x7f, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x7f, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07)

def loop1():

    global shots
    while True:
        if run:
            if len(shots)>=1:
                for i in shots:
                    pos=i[0]-5
                    shots[shots.index(i)]=[pos, i[1]]
                        
                    if pos<5:
                        try:
                            shots.remove([pos, i[1]])
                        except:
                            pass
        time.sleep(0.01)

def loop2():
    global enemies
    
    while True:
        if run:
            for i in enemies:
                pos=i[1]+5
                enemies[enemies.index(i)]=[i[0], pos]
                
                if pos>128:
                    enemies.remove([i[0],pos])
        time.sleep(0.01)

def loop3():
    global enemies

    while True:
        if run:
            if len(enemies)<3:
                for i in range(3):
                    x = randint(1, 54)
                    enemies.append([x,0])
                    time.sleep(0.7)
        else:
            time.sleep(0.1)


th.start_new_thread(loop1, ())
th.start_new_thread(loop2, ())
th.start_new_thread(loop3, ())

while True:
    if run:
        oled.fill(0)

        oled.pixel(8, 19,1)
        oled.pixel(99, 50,1)
        oled.pixel(48, 9,1)
        oled.pixel(77, 32,1)
        oled.pixel(45, 46,1)
        oled.pixel(8, 62,1)
        oled.pixel(5, 3,1)
        oled.pixel(1, 100,1)
        oled.pixel(51, 51,1)
        oled.pixel(87, 5,1)

        oled.text(str(score),0, 4)

        if btn1.value()==1 and a_x<50: a_x+=3
        
        if btn2.value()==1 and a_x>-6: a_x-=3

        if btn0.value()==1:
            if block:
                shots.append([100,a_x+9])
            block=False
        else:
            block=True
        
        for i in shots:
            oled.hline(i[0], i[1], 6, 1)

            for h in enemies:
                if (h[0]<=i[1]<= (h[0]+9)) and i[0]<h[1]:
                    try:
                        enemies.remove([h[0], h[1]])
                        shots.remove([i[0], i[1]])
                    except:
                        pass
                    score+=1
                    pwm.duty(120)
                    time.sleep(0.01)
                    pwm.duty(0)

        for i in enemies:
            oled.rect(i[1], i[0], 10, 10, 1)

            if ((a_x<=i[0]<=(a_x+19)) or (a_x<=i[0]+9<=(a_x+19))) and i[1]>=110:
                run=False
                oled.fill(0)
                fbuf = framebuf.FrameBuffer(bytearray(xd), 128, 64, framebuf.MONO_HLSB)
                oled.blit(fbuf, 0, 0)
                oled.text(str(score),20, 20, 0)
                oled.show()
                play(buzzer, gameover, 120, 0.7)
    if run:
        fbuf = framebuf.FrameBuffer(bytearray(a), 20, 20, framebuf.MONO_HLSB)
        oled.blit(fbuf, 110, a_x)

        oled.show()

    else:
        if btn0.value()==1:
            score=0
            a_x=26
            shots=[]
            enemies=[]
            pwm.freq(4000)
            run=True
    time.sleep(0.01)